// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  email                 String                 @unique
  password              String
  name                  String
  avatar                String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  favorites             Favorite[]
  bioRequests          BioRequest[]
  newsletterSubscriptions NewsletterSubscription[]
  purchases            Purchase[]
}

model Bio {
  id          String     @id @default(uuid())
  name        String
  image       String?
  summary     String
  story       String     @db.Text
  audioUrl    String?
  videoUrl    String?
  categories  Category[]
  popularity  Int        @default(0)
  featured    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  favorites   Favorite[]
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  bios        Bio[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Favorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  bio       Bio      @relation(fields: [bioId], references: [id], onDelete: Cascade)
  bioId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bioId])
}

model Plan {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float
  type        PlanType
  credits     Int?
  purchases   Purchase[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Purchase {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  plan      Plan     @relation(fields: [planId], references: [id])
  planId    String
  status    PurchaseStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BioRequest {
  id          String         @id @default(uuid())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String
  description String         @db.Text
  status      RequestStatus  @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model NewsletterSubscription {
  id        String   @id @default(uuid())
  email     String   @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  status    SubscriptionStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PlanType {
  LIFETIME
  CREDITS
  SUBSCRIPTION
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum SubscriptionStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
} 